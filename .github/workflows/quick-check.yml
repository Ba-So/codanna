name: Quick Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'
  
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'

# Cancel outdated builds for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quick-check:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    # Minimal permissions for security
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-quick-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-quick-
            ${{ runner.os }}-cargo-
      
      # Format check - should be instant
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      # Clippy with strict rules - ~30 seconds with cache
      - name: Clippy strict
        run: cargo clippy --all-targets -- -D warnings
      
      # Quick compile check - ~30 seconds with cache  
      - name: Compile check
        run: cargo check --all-features
      
      # Add status comment on PR (only for PRs)
      - name: Comment PR status
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const outcome = '${{ job.status }}';
            const emoji = outcome === 'success' ? '✅' : '❌';
            const message = `${emoji} Quick checks ${outcome}`;
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Quick checks')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }