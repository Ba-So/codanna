name: Release on Tag
# Triggers when you push a tag starting with 'v'
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Needed to create releases
  actions: write   # Needed to trigger workflow dispatch

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Verify version matches Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$CARGO_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "‚ùå Version mismatch!"
            echo "   Tag version: ${{ steps.version.outputs.version }}"
            echo "   Cargo.toml:  $CARGO_VERSION"
            exit 1
          fi
          echo "‚úÖ Version verified: $CARGO_VERSION"
      
      # Trigger the build workflow
      - name: Trigger build workflow
        uses: actions/github-script@v7
        with:
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: context.ref,
              inputs: {
                version: '${{ steps.version.outputs.version }}'
              }
            });
            console.log('Build workflow triggered:', result);
            
      # Wait for build to complete (with timeout)
      - name: Wait for build artifacts
        id: wait-build
        run: |
          echo "‚è≥ Waiting for build workflow to complete..."
          sleep 60  # Initial wait
          
          # Poll for up to 30 minutes
          for i in {1..30}; do
            echo "Checking for artifacts (attempt $i/30)..."
            
            # Check if artifacts exist using gh CLI
            RUNS=$(gh run list --workflow=release.yml --limit=1 --json databaseId,status,conclusion)
            RUN_ID=$(echo "$RUNS" | jq -r '.[0].databaseId')
            STATUS=$(echo "$RUNS" | jq -r '.[0].status')
            CONCLUSION=$(echo "$RUNS" | jq -r '.[0].conclusion')
            
            if [ "$STATUS" = "completed" ] && [ "$CONCLUSION" = "success" ]; then
              echo "‚úÖ Build completed successfully!"
              echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
              break
            elif [ "$STATUS" = "completed" ] && [ "$CONCLUSION" != "success" ]; then
              echo "‚ùå Build failed!"
              exit 1
            fi
            
            sleep 60  # Wait 1 minute before next check
          done
        env:
          GH_TOKEN: ${{ github.token }}
      
      # Download artifacts
      - name: Download build artifacts
        run: |
          echo "üì• Downloading artifacts from run ${{ steps.wait-build.outputs.run_id }}..."
          gh run download ${{ steps.wait-build.outputs.run_id }} --dir artifacts
          
          # List what we downloaded
          echo "üì¶ Downloaded artifacts:"
          ls -la artifacts/
        env:
          GH_TOKEN: ${{ github.token }}
      
      # Create release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/codanna-v${{ steps.version.outputs.version }}-linux-x64/*
            artifacts/codanna-v${{ steps.version.outputs.version }}-macos-x64/*
            artifacts/codanna-v${{ steps.version.outputs.version }}-beta-windows-x64/*
          
      - name: Cleanup
        if: always()
        run: rm -rf artifacts/